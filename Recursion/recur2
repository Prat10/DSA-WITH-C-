# Print the number until N
1. in Decreasing Order
2. in Increasing Order

#include <bits/stdc++.h>
using namespace std;

void dec(int n){
    if(n==0) return;
    cout<<n<<endl;
    dec(n-1);
}
void inc(int n){
    if (n==0) return;
    inc(n-1);
    cout<<n<<endl;
}

int main(){
    int n;
    cin>>n;
    dec(n);
    inc(n);
}
Question : -// we have to Print the string in reverse order 
#include <bits/stdc++.h>
using namespace std;
void reverse(string s){
    if(s.length()==0){
        return;
    }
    string ros=s.substr(1);
    reverse(ros);
    cout<<s[0];






int main(){
    reverse("pratyush");
} 


Question :-//you have a given a string in place pi replace value of 3.14 in Recursion...

#include <bits/stdc++.h>
using namespace std;

void replacePi(string s){
    if(s.length()==0){ //base case
        return;
    }
    if(s[0] =='p' && s[1]=='i'){
        cout<<3.14;
        replacePi(s.substr(2));
    }
    else {
         cout<<s[0];
        replacePi(s.substr(1));
    }
}

int main (){
   replacePi("pirahulpicase"); 
}

 # Question:- //Reversing an array from recurison
#include <bits/stdc++.h>
#include <stack>
using namespace std;

void reverse(int i,int a[],int n){
    if(i>=n/2) return;  //base case to stop the array 
    swap(a[i],a[n-i-1]); //in built swap function
    reverse(i+1,a,n);  //recursive call
}
int main() {
int n;
cin>>n;
int a[n];
for(int i=0;i<n;i++) cin>>a[i];
 reverse(0,a,n); // calling a function in main function
for(int i=0;i<n;i++) cout<<a[i];
return 0;
}

///Recursion Question with getting Subsequence of a number which Cover deep understanding of Recursion 

Solution:-
                #include <bits/stdc++.h>
                using namespace std;
                void PrintF(int index,vector<int> &v,int arr[],int n){
                    if(index >= n){
                        for(auto it : v){
                            cout<<it<<" ";
                        }
                        cout<<endl;
                        return;
                    }
                        v.push_back(arr[index]);
                        PrintF(index+1,v,arr,n);//take
                        v.pop_back();
                        PrintF(index+1,v,arr,n);//not take 
                    }
                    int main() {
                        int arr[]={3,1,2};
                        int n=3;
                        vector <int> v;
                        int index=0;
                        PrintF(index,v,arr,n);
                        return 0;
                    }





