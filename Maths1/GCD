Given two positive integers A and B, find GCD of A and B.


Example 1:

Input: A = 3, B = 6
Output: 3
Explanation: GCD of 3 and 6 is 3

solution:for O(min(A,B)) time complexity
int gcd(int A, int B) 
	{ 
	    // code here
	    int res=min(A,B); //it will get the min number from two it is a built-in funciton in c++
	    while(res>0){    //from this we check until zero which is greatest comman divisor
	        if(A%res==0 && B%res==0){
	            break;   //once we find the max we break the loop
	        }
	        res--;
	    }
	    return res;   //return the result
	      
	} 

     Eucliean Algorithm:-This algorithm call a function recursive until the remainder become zero and In each step divisor become dividend,remainder become divisor.
      once in which divisior zero remainder comes we return that divisor as GCD...
     
    Time Complexity: O(log(min(A, B)))
     Expected Auxiliary Space: O(1)
     
    solution:
      int gcd(int A, int B) 
	{ 
	    // code here
	   if(B==0){  
	      return A;
	  }
	  gcd(B,A%B);
	      
	} 
	
	Question LCM:-Given two numbers A and B. The task is to find out their LCM and GCD.
           solution:
	   Input:
		A = 5 , B = 10
		Output:
		10 5
		Explanation:
		LCM of 5 and 10 is 10, while
		thier GCD is 5
     sol:
     vector<long long> lcmAndGcd(long long A , long long B) {
       vector <long long> v;   //this vector is used to store lcm and gcd
       long long gcd=__gcd(A,B);  //__gcd is inbuilt function which takes log(n) conplexity as well
       long long lcm=A*B/gcd;  //to calculate lcm=A*B/gcd(A,B);
       v.push_back(lcm);
       v.push_back(gcd);
       return v;
    }





      
